@using PaintingProjectsManagement.Blazor.Modules.Materials;
@using PaintingProjectsManagement.Blazor.Modules.Shared
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids

@page "/materials"

@inject IMaterialsService MaterialsService

<h3>Materials List</h3>

@if (loading)
{
    <p>Loading materials...</p>
}
@* else if (GridData == null || !GridData.Any())
{
    <p>No materials found.</p> 
}*@
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid 
                    TValue="MaterialDetails" 
                    AllowPaging="false" 
                    Toolbar="@(new string[] { "Add", "Edit", "Delete", "Update", "Cancel" })">
                    
                    <SfDataManager 
                        AdaptorInstance="@typeof(MaterialsAdaptor)" 
                        Adaptor="Adaptors.CustomAdaptor"/>
                    
                    <GridEditSettings 
                        AllowAdding="true" 
                        AllowEditing="true" 
                        AllowDeleting="true"
                        NewRowPosition="NewRowPosition.Top"
                        ShowDeleteConfirmDialog="true"
                        Mode="EditMode.Normal">
                    </GridEditSettings>
                    
                    <GridColumns>
                        <GridColumn 
                            Field=@nameof(MaterialDetails.Id) 
                            IsPrimaryKey="true" 
                            Visible="false" />
                        <GridColumn 
                            Field=@nameof(MaterialDetails.Name) HeaderText="Name" 
                            ValidationRules="@(new ValidationRules { Required = true })"/>
                        <GridColumn 
                            Field=@nameof(MaterialDetails.Unit) 
                            HeaderText="Unit Type" 
                            Width="150" 
                            EditType="EditType.DropDownEdit">
                            <EditTemplate>
                                <SfDropDownList 
                                    ID="Unit" 
                                    TItem="EnumReference" 
                                    TValue="EnumReference" 
                                    @bind-Value="@((context as MaterialDetails).Unit)" 
                                    DataSource="@UnitTypes">
                                    <DropDownListFieldSettings 
                                        Value="Value" 
                                        Text="Value"/>
                                </SfDropDownList>
                            </EditTemplate>
                        </GridColumn>
                        <GridColumn 
                            Field=@nameof(MaterialDetails.PricePerUnit) 
                            HeaderText="Price per Unit" 
                            Format="C2" 
                            ValidationRules="@(new ValidationRules { Required = true, Number = true })" 
                            Type="ColumnType.Double" 
                            Width="130"/>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
}

@code {
    private bool loading = true;
    private bool hasInitialized;

    public List<EnumReference> UnitTypes => new List<EnumReference>
    {
        new EnumReference(MaterialUnit.Drops),
        new EnumReference(MaterialUnit.Centimeters),
        new EnumReference(MaterialUnit.Unit),
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            try
            {
                loading = true;
            }
            catch (Exception ex)
            {
                // TODO: implement proper error handling
            }
            finally
            {
                loading = false;

                StateHasChanged();
            }
        }
    }
}
