@using PaintingProjectsManagement.Blazor.Modules.Materials;
@using PaintingProjectsManagement.Blazor.Modules.Shared
@using Syncfusion.Blazor.Grids

@page "/materials"

@inject IMaterialsService MaterialsService

<h3>Materials List</h3>

@if (loading)
{
    <p>Loading materials...</p>
}
@* else if (GridData == null || !GridData.Any())
{
    <p>No materials found.</p> 
}*@
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid TValue="MaterialDetails" AllowPaging="false" Toolbar="@(new string[] { "Add", "Edit", "Delete", "Update", "Cancel" })">
                    <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(MaterialDetails.Name) HeaderText="Name" ValidationRules="@(new ValidationRules { Required = true })"></GridColumn>
                        <GridColumn Field=@nameof(MaterialDetails.Unit.Value) HeaderText="Unit Type" Width="150" EditType="EditType.DropDownEdit" EditorSettings="@UnitTypeValues"></GridColumn>
                        <GridColumn Field=@nameof(MaterialDetails.PricePerUnit) HeaderText="Price per Unit" Format="C2" ValidationRules="@(new ValidationRules { Required = true, Number = true })" Type="ColumnType.Double" Width="130"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
}

@code {
    // private List<MaterialDetails>? GridData;
    private bool loading = true;
    private bool hasInitialized;

    public IEditorSettings UnitTypeValues = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>()
        {
            DataSource = new List<EnumReference>()
            {
                new EnumReference(MaterialUnit.Drops),
                new EnumReference(MaterialUnit.Centimeters),
                new EnumReference(MaterialUnit.Unit),
            }
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            try
            {
                loading = true;

                // var result = await MaterialsService.GetMaterialsAsync(default);

                // GridData = result.ToList();
            }
            catch (Exception ex)
            {
                // TODO: implement proper error handling
            }
            finally
            {
                loading = false;

                StateHasChanged();
            }
        }
    }
}
