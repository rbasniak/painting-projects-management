@page "/storage-example"
@using PaintingProjectsManagement.Blazor.Modules.Authentication
@inject IStorageService StorageService

<h3>Storage Service Example</h3>

<div class="mb-3">
    <label for="keyInput" class="form-label">Key:</label>
    <input id="keyInput" @bind="key" class="form-control" />
</div>

<div class="mb-3">
    <label for="valueInput" class="form-label">Value:</label>
    <input id="valueInput" @bind="value" class="form-control" />
</div>

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="SaveToSession">Save to Session Storage</button>
    <button class="btn btn-secondary me-2" @onclick="SaveToLocal">Save to Local Storage</button>
    <button class="btn btn-info me-2" @onclick="LoadFromSession">Load from Session</button>
    <button class="btn btn-warning me-2" @onclick="LoadFromLocal">Load from Local</button>
    <button class="btn btn-danger" @onclick="ClearStorage">Clear Session Storage</button>
</div>

<div class="alert alert-info">
    <strong>Current Value:</strong> @currentValue
</div>

<div class="alert alert-success">
    <strong>Message:</strong> @message
</div>

@code {
    private string key = "test-key";
    private string value = "test-value";
    private string currentValue = "";
    private string message = "";

    private async Task SaveToSession()
    {
        try
        {
            await StorageService.SetItemAsync(key, value, StorageType.Session);
            message = $"Saved '{value}' to session storage with key '{key}'";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Error saving to session storage: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SaveToLocal()
    {
        try
        {
            await StorageService.SetItemAsync(key, value, StorageType.Local);
            message = $"Saved '{value}' to local storage with key '{key}'";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Error saving to local storage: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadFromSession()
    {
        try
        {
            var loadedValue = await StorageService.GetItemAsync(key, StorageType.Session);
            currentValue = loadedValue ?? "No value found";
            message = $"Loaded from session storage: {currentValue}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Error loading from session storage: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task LoadFromLocal()
    {
        try
        {
            var loadedValue = await StorageService.GetItemAsync(key, StorageType.Local);
            currentValue = loadedValue ?? "No value found";
            message = $"Loaded from local storage: {currentValue}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Error loading from local storage: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ClearStorage()
    {
        try
        {
            await StorageService.ClearAsync(StorageType.Session);
            message = "Session storage cleared";
            currentValue = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Error clearing session storage: {ex.Message}";
            StateHasChanged();
        }
    }
} 