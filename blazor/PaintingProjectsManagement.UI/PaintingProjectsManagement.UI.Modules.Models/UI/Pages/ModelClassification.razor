@page "/models/classification"

@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@using PaintingProjectsManagement.UI.Modules.Models
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading
@using Microsoft.JSInterop

@implements IAsyncDisposable

@inject IJSRuntime JsRuntime
@inject IModelsService ModelsService

@if (CurrentModel != null)
{
    <MudContainer Class="viewer-container" MaxWidth="MaxWidth.False">

    <MudText Typo="Typo.h5" Class="mb-2">Model Classification: @CurrentModel.Name</MudText>
    <MudText Typo="Typo.body1" Class="mb-2">Artist: @CurrentModel.Artist</MudText>
    <MudText Typo="Typo.body1" Class="mb-2">Category: @CurrentModel.Category.Name</MudText>
    <MudText Typo="Typo.body1" Class="mb-2">Characters: @(string.Join(", ", CurrentModel.Characters))</MudText>

    <!-- Stage: arrows + big image -->
    <div class="stage">
        <button type="button" class="nav-zone left" @onclick="Prev">
            <MudIcon Icon="@Icons.Material.Filled.ChevronLeft" Class="nav-icon" />
        </button>

        <div class="image-box">
            @if (!string.IsNullOrWhiteSpace(CurrentImageUrl))
            {
                <img src="@GetPictureAddress(CurrentImageUrl)" alt="model" class="main-image" />
            }
            else
            {
                <MudPaper Class="placeholder" Elevation="1">No models available</MudPaper>
            }
        </div>

        <button type="button" class="nav-zone right" @onclick="Next">
            <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Class="nav-icon" />
        </button>
    </div>

    <!-- Controls: rating + criteria -->
    <MudPaper Class="controls" Elevation="1">
        <div class="rating-row">
            <MudText Typo="Typo.h6" Class="mr-2">Rating</MudText>
            <MudRating Class="rating-xl"
                       MaxValue="5"
                       Size="Size.Medium"
                       SelectedValue="@CurrentModel.Score"
                       SelectedValueChanged="OnRatingChanged" />
        </div>

        <div class="criteria-grid">
            <div class="criteria-group">
                <MudText Typo="Typo.subtitle1" Class="mb-1">Base Size</MudText>
                <MudRadioGroup T="BaseSize" Value="@((BaseSize)CurrentModel.BaseSize.Id)" ValueChanged="OnBaseSizeChanged" Orientation="Orientation.Horizontal">
                    <MudRadio T="BaseSize" Value="BaseSize.Small" Size="Size.Medium" Label="Small" />
                    <MudRadio T="BaseSize" Value="BaseSize.Medium" Size="Size.Medium" Label="Medium" />
                    <MudRadio T="BaseSize" Value="BaseSize.Big" Size="Size.Medium" Label="Big" />
                </MudRadioGroup>
            </div>

            <div class="criteria-group">
                <MudText Typo="Typo.subtitle1" Class="mb-1">Figure Size</MudText>
                <MudRadioGroup T="FigureSize" Value="@((FigureSize)CurrentModel.FigureSize.Id)" ValueChanged="OnFigureSizeChanged" Orientation="Orientation.Horizontal">
                    <MudRadio T="FigureSize" Value="FigureSize.Small" Size="Size.Medium" Label="Small" />
                    <MudRadio T="FigureSize" Value="FigureSize.Medium" Size="Size.Medium" Label="Medium" />
                    <MudRadio T="FigureSize" Value="FigureSize.Big" Size="Size.Medium" Label="Big" />
                </MudRadioGroup>
            </div>

            <div class="criteria-group">
                <MudText Typo="Typo.subtitle1" Class="mb-1">Number of Figures</MudText>
                <MudRadioGroup T="int" Value="@CurrentModel.NumberOfFigures" ValueChanged="OnNumberOfFiguresChanged" Orientation="Orientation.Horizontal">
                    <MudRadio T="int" Value="1" Size="Size.Medium" Label="1" />
                    <MudRadio T="int" Value="2" Size="Size.Medium" Label="2" />
                    <MudRadio T="int" Value="3" Size="Size.Medium" Label="3" />
                    <MudRadio T="int" Value="4" Size="Size.Medium" Label="4" />
                    <MudRadio T="int" Value="5" Size="Size.Medium" Label="5" />
                    <MudRadio T="int" Value="6" Size="Size.Medium" Label="6" />
                </MudRadioGroup>
            </div>

            <div class="criteria-group">
                <MudCheckBox T="bool" @bind-Checked="@MustHave" Size="Size.Medium" Label="Must have" />
            </div>
        </div>
    </MudPaper>
    </MudContainer>
}
else
{
    <p>Loading...</p>
}

@code {

    private IReadOnlyCollection<ModelDetails> _models = [];
    private int _index = 0;

    private IJSObjectReference? _keysModule;
    private IJSObjectReference? _keysHandle;
    private IDisposable? _selfRef; // holds DotNetObjectReference for cleanup

    private ModelDetails CurrentModel => (_models.Count == 0) ? null : _models.ElementAt(_index);

    private bool MustHave
    {
        get => CurrentModel.MustHave;
        set
        {
            if (CurrentModel.MustHave != value)
            {
                CurrentModel.MustHave = value;
                _ = OnMustHaveChanged(value);
            }
        }
    }

    private string? CurrentImageUrl
    {
        get
        {
            if (CurrentModel is null)
            {
                return null;
            }

            // Prefer cover; fallback to first picture
            if (!string.IsNullOrWhiteSpace(CurrentModel.CoverPicture))
            {
                return CurrentModel.CoverPicture;
            }

            if (CurrentModel.Pictures is not null && CurrentModel.Pictures.Length > 0)
            {
                return CurrentModel.Pictures[0];
            }

            return null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var selfRef = DotNetObjectReference.Create(this);
        _selfRef = selfRef;

        _keysModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/model-viewer-keys.js");
        _keysHandle = await _keysModule.InvokeAsync<IJSObjectReference>("attach", selfRef);
    }

    protected override async Task OnInitializedAsync()
    {
        _models = await ModelsService.GetAllAsync(default);

        LoadStateForCurrentModel();
    }

    [JSInvokable]
    public void JsPrev()
    {
        Prev();
    }

    [JSInvokable]
    public void JsNext()
    {
        Next();
    }

    private void Next()
    {
        if (_models.Count == 0)
        {
            return;
        }

        _index = (_index + 1) % _models.Count;

        LoadStateForCurrentModel();
    }

    private void Prev()
    {
        if (_models.Count == 0)
        {
            return;
        }

        _index = (_index - 1 + _models.Count) % _models.Count;

        LoadStateForCurrentModel();
    }

    private void LoadStateForCurrentModel()
    {
        if (CurrentModel is null)
        {
            return;
        }

        StateHasChanged();
    }

    private string GetPictureAddress(string url)
    {
        return $"https://localhost:7236/{url.Trim('/')}";
    }

    private async Task OnRatingChanged(int value)
    {
        CurrentModel.Score = value;

        try
        {
            await ModelsService.RateModelAsync(CurrentModel.Id, value, default);
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private async Task OnBaseSizeChanged(BaseSize value)
    {
        CurrentModel.BaseSize = EnumReference.FromValue(value); 

        try
        {
            await ModelsService.SetBaseSizeAsync(CurrentModel.Id, value, default);
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private async Task OnFigureSizeChanged(FigureSize value)
    {
        CurrentModel.FigureSize = EnumReference.FromValue(value);

        try
        {
            await ModelsService.SetFigureSizeAsync(CurrentModel.Id, (FigureSize)value, default);
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private async Task OnNumberOfFiguresChanged(int value)
    {
        CurrentModel.NumberOfFigures = value;

        try
        {
            await ModelsService.SetFigureCountAsync(CurrentModel.Id, value, default);
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private async Task OnMustHaveChanged(bool value)
    {
        CurrentModel.MustHave = value;

        try
        {
            await ModelsService.SetMustHaveAsync(CurrentModel.Id, value, default);
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_keysHandle is not null)
        {
            await _keysHandle.InvokeVoidAsync("dispose");
        }

        if (_keysModule is not null)
        {
            await _keysModule.DisposeAsync();
        }

        _selfRef?.Dispose();
    }
}

<style>
    .viewer-container {
        padding: 16px;
    }

    .stage {
        display: grid;
        grid-template-columns: 88px 1fr 88px; /* no width clamp */
        gap: 8px;
        align-items: center;
        justify-content: center;
    }

    @@media (max-width: 900px) {
        .stage {
            grid-template-columns: 64px 1fr 64px;
        }
    }

    .nav-zone {
        height: 60vh;
        border: none;
        background: transparent;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
    }

        .nav-zone:hover {
            background: rgba(0,0,0,.05);
        }

    .nav-icon {
        font-size: 56px;
    }

    .image-box {
        height: 60vh; /* full image visible within viewport height */
        width: 100%;
        background: var(--mud-palette-background);
        border-radius: 12px;
        display: flex; /* center the image */
        align-items: center;
        justify-content: center;
        overflow: hidden; /* safety */
    }

    .main-image {
        max-width: 100%;
        max-height: 100%;
        width: auto; /* preserve aspect ratio */
        height: auto; /* preserve aspect ratio */
        display: block;
    }

    .placeholder {
        width: 100%;
        height: 100%;
        display: grid;
        place-items: center;
    }

    .controls {
        margin-top: 16px;
        padding: 16px;
    }

    .rating-row {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .rating-xl .mud-rating {
        font-size: 44px;
    }

    .criteria-grid {
        margin-top: 12px;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 16px;
    }

    .criteria-group {
        padding-top: 4px;
    }
</style>
