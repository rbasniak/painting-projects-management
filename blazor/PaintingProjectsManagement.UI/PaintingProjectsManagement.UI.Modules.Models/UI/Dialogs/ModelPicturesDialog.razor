@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System.Linq
@using System.Threading
@using System
@using PaintingProjectsManagement.UI.Modules.Models

@namespace PaintingProjectsManagement.UI.Modules.Models.UI.Dialogs

<MudDialog Class="pics-dialog">
  <DialogContent>
    <MudStack Spacing="2">
      <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ActivatorContent>
          <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload Files
          </MudButton>
        </ActivatorContent>
      </MudFileUpload>

            <MudGrid Class="cards-grid">
                @foreach (var picture in _vm.Pictures)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Class=@($"pic-card {(IsCover(picture) ? "is-cover" : "")}")>
                            @if (IsCover(picture))
                            {
                                <div class="cover-ribbon">COVER</div>
                            }

                            <MudCardContent Class="p-0">
                                <div class="img-frame">
                                    <img src="@GetPictureAddress(picture)" alt="picture" class="img-fit" />
                                </div>
                            </MudCardContent>

                            <MudCardActions Class="pic-actions">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                               OnClick="@(() => DeletePicture(picture))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Star"
                                               Color="@(IsCover(picture) ? Color.Warning : Color.Default)"
                                               OnClick="@(() => PromotePicture(picture))" />
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
    </MudStack>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Close">Close</MudButton>
  </DialogActions>
</MudDialog>

@code {
    [Parameter] public ModelDetails Model { get; set; } = new();

    [Inject] public IModelsService ModelsService { get; set; } = default!;

    [CascadingParameter] public IMudDialogInstance? MudDialog { get; set; }

    private ModelDetailsViewModel _vm = new();

    protected override void OnParametersSet()
    {
        _vm = ModelDetailsViewModel.From(Model);
    }

    private string GetPictureAddress(string url)
    {
        return $"https://localhost:7236{url}";
    }

    private string GetCardClass(string picture)
    {
        return IsCover(picture) ? "border border-2 border-primary" : string.Empty;
    }

    private bool IsCover(string picture)
    {
        return string.Equals(_vm.CoverPicture, picture, StringComparison.Ordinal);
    }

    private void Close()
    {
        MudDialog?.Close();
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        ArgumentNullException.ThrowIfNull(file);

        using var memoryStream = new MemoryStream();
        using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024, cancellationToken: default))
        {
            await stream.CopyToAsync(memoryStream, cancellationToken: default);
        }

        var fileBytes = memoryStream.ToArray();
        var base64Image = Convert.ToBase64String(fileBytes);
        var fileExtension = Path.GetExtension(file.Name);

        var updatedModel = await ModelsService.UploadPictureAsync(new UploadModelPictureRequest
        {
            ModelId = _vm.Id,
            Base64Image = base64Image,
            FileExtension = fileExtension
        }, cancellationToken: default);

        // Apply the authoritative server state to the VM
        _vm.Apply(updatedModel);

        StateHasChanged();
    }

    private async Task DeletePicture(string picture)
    {
        await ModelsService.DeletePictureAsync(_vm.Id, picture, CancellationToken.None);

        // Update local VM immediately for responsive UI
        _vm.Pictures = _vm.Pictures.Where(x => !string.Equals(x, picture, StringComparison.Ordinal)).ToArray();

        if (string.Equals(_vm.CoverPicture, picture, StringComparison.Ordinal))
        {
            _vm.CoverPicture = null;
        }

        StateHasChanged();
    }

    private async Task PromotePicture(string picture)
    {
        await ModelsService.PromotePictureToCoverAsync(new PromoteModelPictureRequest
        {
            ModelId = _vm.Id,
            PictureUrl = picture
        }, CancellationToken.None);

        _vm.CoverPicture = picture;

        StateHasChanged();
    }

    private sealed class ModelDetailsViewModel
    {
        public Guid Id { get; set; }
        public string? CoverPicture { get; set; }
        public string[] Pictures { get; set; } = Array.Empty<string>();

        public static ModelDetailsViewModel From(ModelDetails model)
        {
            ArgumentNullException.ThrowIfNull(model);

            return new ModelDetailsViewModel
            {
                Id = model.Id,
                CoverPicture = model.CoverPicture,
                Pictures = model.Pictures?.ToArray() ?? Array.Empty<string>()
            };
        }

        public void Apply(ModelDetails model)
        {
            ArgumentNullException.ThrowIfNull(model);

            Id = model.Id;
            CoverPicture = model.CoverPicture;
            Pictures = model.Pictures?.ToArray() ?? Array.Empty<string>();
        }
    }
}


<style>
    /* Bigger dialog */
    .pics-dialog .mud-dialog {
        width: min(1200px, 95vw);
    }

    .pics-dialog .mud-dialog-content {
        max-height: 80vh;
        overflow: auto;
    }

    /* Uniform cards */
    .pic-card {
        position: relative;
        display: flex;
        flex-direction: column;
        border-radius: 12px;
    }

    .img-frame {
        aspect-ratio: 1 / 1;
        width: 100%;
        background: var(--mud-palette-background);
        display: grid;
        place-items: center;
        overflow: hidden; /* keep anything from leaking out */
    }

    .img-fit {
        width: 100%; /* must be explicit for object-fit to apply */
        height: 100%; /* must be explicit for object-fit to apply */
        object-fit: contain; /* now it will letterbox instead of stretching */
        display: block;
    }

    .pic-actions {
        margin-top: auto;
        min-height: 56px;
        display: flex;
        justify-content: space-between;
    }

    /* Cover visuals */
    .pic-card.is-cover {
        outline: 3px solid var(--mud-palette-warning);
        box-shadow: 0 0 0 4px rgba(255,193,7,.25);
    }

    .pic-card .cover-ribbon {
        position: absolute;
        top: 10px;
        left: -6px;
        background: linear-gradient(90deg, #f59e0b, #fbbf24);
        color: #111;
        font-weight: 700;
        font-size: .75rem;
        letter-spacing: .08em;
        padding: 6px 12px;
        border-top-right-radius: 8px;
        border-bottom-right-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,.25);
    }
</style>
