@using MudBlazor
@using PaintingProjectsManagement.UI.Modules.Models
@using PaintingProjectsManagement.UI.Modules.Shared

@namespace PaintingProjectsManagement.UI.Modules.Models.UI.Dialogs

<MudDialog>
    <DialogContent>
        <MudStack Spacing="3">
            <MudTextField @bind-Value="Model.Name" Label="Name" />
            
            <MudAutocomplete @bind-Value="Model.Franchise" 
                           Label="Franchise" 
                           SearchFunc="SearchFranchises"
                           ToStringFunc="(string s) => s"
                           AllowCustomValues="true" />

            <MudAutocomplete T="string"
                             Label="Characters"
                             @bind-Text="_characterInput"
                             SearchFunc="SearchCharacters"
                             ToStringFunc="(string s) => s"
                             MultiSelection="true"
                             SelectedValues="selectedCharacters"
                             SelectedValuesChanged="OnCharactersChanged"
                             AllowCustomValues="true"
                             CoerceText="false"
                             CoerceValue="true"
                             OnKeyDown="HandleCharacterKeyDown"
                             Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Material.Filled.Add"
                             OnAdornmentClick="AddCharacterFromInput" />

            <MudChipSet T="string" Class="mt-2">
                @foreach (var character in Model.Characters)
                {
                    <MudChip Value="@character" Text="@character" Closeable="true"
                             OnClose="@((MudChip<string> _) => RemoveCharacter(character))" />
                }
            </MudChipSet>
            
            <MudSelect @bind-Value="SelectedCategoryId" Label="Category">
                @foreach (var category in categories)
                {
                    <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                }
            </MudSelect>
            
            <MudSelect @bind-Value="SelectedType" Label="Type">
                @foreach (var type in Enum.GetValues<ModelType>())
                {
                    <MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
                }
            </MudSelect>
            
            <MudAutocomplete @bind-Value="Model.Artist" 
                           Label="Artist" 
                           SearchFunc="SearchArtists"
                           ToStringFunc="(string s) => s"
                           AllowCustomValues="true" />
            
            <MudAutocomplete T="string"
                             Label="Tags"
                             @bind-Text="_tagInput"
                             SearchFunc="SearchTags"
                             ToStringFunc="(string s) => s"
                             MultiSelection="true"
                             SelectedValues="selectedTags"
                             SelectedValuesChanged="OnTagsChanged"
                             AllowCustomValues="true"
                             CoerceText="false"
                             CoerceValue="true"
                             OnKeyDown="HandleTagKeyDown"
                             Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Material.Filled.Add"
                             OnAdornmentClick="AddTagFromInput" />

            <MudChipSet T="string" Class="mt-2">
                @foreach (var tag in Model.Tags)
                {
                    <MudChip Value="@tag" Text="@tag" Closeable="true"
                             OnClose="@((MudChip<string> _) => RemoveTag(tag))" />
                }
            </MudChipSet>
            
            <MudCheckBox T="bool" @bind-Checked="Model.MustHave" Label="Must Have" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public ModelDetails Model { get; set; } = new();
    [Parameter] public List<ModelDetails> AllModels { get; set; } = new();
    [Inject] public IModelCategoriesService ModelCategoriesService { get; set; } = default!;

    [CascadingParameter] public MudBlazor.IMudDialogInstance? MudDialog { get; set; }

    private List<ModelCategoryDetails> categories = new();
    private HashSet<string> selectedCharacters = new();
    private HashSet<string> selectedTags = new();

    private Guid SelectedCategoryId
    {
        get => Model.Category.Id;
        set => Model.Category = new PaintingProjectsManagement.UI.Modules.Shared.EntityReference(value, categories.FirstOrDefault(c => c.Id == value)?.Name ?? string.Empty);
    }

    private ModelType SelectedType
    {
        get => (ModelType)Model.Type.Id;
        set => Model.Type = new EnumReference((int)value, value.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        // Initialize selectedCharacters with existing characters
        selectedCharacters = new HashSet<string>(Model.Characters);
        // Initialize selectedTags with existing tags
        selectedTags = new HashSet<string>(Model.Tags);
    }

    private async Task LoadCategories()
    {
        categories = (await ModelCategoriesService.GetAllAsync(CancellationToken.None)).ToList();
    }

    private async Task<IEnumerable<string>> SearchFranchises(string value, CancellationToken cancellationToken)
    {
        var franchises = AllModels
            .Where(m => !string.IsNullOrWhiteSpace(m.Franchise))
            .Select(m => m.Franchise)
            .Distinct()
            .OrderBy(f => f)
            .ToList();

        var results = franchises.Where(f => f.Contains(value, StringComparison.OrdinalIgnoreCase)).ToList();
        
        // Add the current input value if it's not empty and not already in the results
        if (!string.IsNullOrWhiteSpace(value) && !results.Contains(value, StringComparer.OrdinalIgnoreCase))
        {
            results.Insert(0, value);
        }
        
        return results;
    }

    private async Task<IEnumerable<string>> SearchCharacters(string value, CancellationToken cancellationToken)
    {
        var characters = AllModels
            .SelectMany(m => m.Characters)
            .Where(c => !string.IsNullOrWhiteSpace(c))
            .Distinct()
            .OrderBy(c => c)
            .ToList();

        var results = characters.Where(c => c.Contains(value, StringComparison.OrdinalIgnoreCase)).ToList();
        
        // Add the current input value if it's not empty and not already in the results
        if (!string.IsNullOrWhiteSpace(value) && !results.Contains(value, StringComparer.OrdinalIgnoreCase))
        {
            results.Insert(0, value);
        }
        
        return results;
    }

    private async Task<IEnumerable<string>> SearchArtists(string value, CancellationToken cancellationToken)
    {
        var artists = AllModels
            .Where(m => !string.IsNullOrWhiteSpace(m.Artist))
            .Select(m => m.Artist!)
            .Distinct()
            .OrderBy(a => a)
            .ToList();

        var results = artists.Where(a => a.Contains(value, StringComparison.OrdinalIgnoreCase)).ToList();
        
        // Add the current input value if it's not empty and not already in the results
        if (!string.IsNullOrWhiteSpace(value) && !results.Contains(value, StringComparer.OrdinalIgnoreCase))
        {
            results.Insert(0, value);
        }
        
        return results;
    }

    private async Task<IEnumerable<string>> SearchTags(string value, CancellationToken cancellationToken)
    {
        var tags = AllModels
            .SelectMany(m => m.Tags)
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .Distinct()
            .OrderBy(t => t)
            .ToList();

        var results = tags.Where(t => t.Contains(value, StringComparison.OrdinalIgnoreCase)).ToList();
        
        // Add the current input value if it's not empty and not already in the results
        if (!string.IsNullOrWhiteSpace(value) && !results.Contains(value, StringComparer.OrdinalIgnoreCase))
        {
            results.Insert(0, value);
        }
        
        return results;
    }



 

    private void OnCharactersChanged(HashSet<string> newSelectedCharacters)
    {
        selectedCharacters = newSelectedCharacters;
        Model.Characters = selectedCharacters.ToArray();
    }

    private void OnTagsChanged(HashSet<string> newSelectedTags)
    {
        selectedTags = newSelectedTags;
        Model.Tags = selectedTags.ToArray();
    }

    private void HandleTagKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == ",")
            AddTagFromInput();
    }

    private void AddTagFromInput()
    {
        var v = _tagInput?.Trim();
        if (string.IsNullOrWhiteSpace(v)) return;

        if (!selectedTags.Contains(v, StringComparer.OrdinalIgnoreCase))
            AddTag(v);

        _tagInput = "";
    }

    private void AddTag(string v)
    {
        if (selectedTags.Add(v))
            Model.Tags = selectedTags.ToArray();
    }

    private void RemoveTag(string tag)
    {
        selectedTags.RemoveWhere(t => string.Equals(t, tag, StringComparison.OrdinalIgnoreCase));
        Model.Tags = selectedTags.ToArray();
    }

    private void Submit()
    {
        MudDialog?.Close(DialogResult.Ok(Model));
    }
    
    private void Cancel() 
    {
        MudDialog?.Cancel();
    }









    private string _tagInput = "";
    private string _characterInput = "";

    private void HandleCharacterKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == ",")
            AddCharacterFromInput();
    }

    private void AddCharacterFromInput()
    {
        var v = _characterInput?.Trim();
        if (string.IsNullOrWhiteSpace(v)) return;

        // include in selectable list for future searches if it didn't exist
        if (!selectedCharacters.Contains(v, StringComparer.OrdinalIgnoreCase))
            AddCharacter(v);

        _characterInput = "";
    }

    private void AddCharacter(string v)
    {
        if (selectedCharacters.Add(v))
            Model.Characters = selectedCharacters.ToArray();
    }

    private void RemoveCharacter(string character)
    {
        selectedCharacters.RemoveWhere(c => string.Equals(c, character, StringComparison.OrdinalIgnoreCase));
        Model.Characters = selectedCharacters.ToArray();
    }
}
