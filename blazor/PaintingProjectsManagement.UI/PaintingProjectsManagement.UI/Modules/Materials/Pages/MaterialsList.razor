@using PaintingProjectsManagement.UI.Modules.Materials;
@using PaintingProjectsManagement.UI.Modules.Shared
@using System.Net.Http.Json

@inject IMaterialsService MaterialsService;
@inject IDialogService DialogService

@page "/materials/library"

<MudDataGrid T="MaterialDetails"
             Items="@_gridData"
             SortMode="SortMode.Single"
             Filterable="true"
             Loading="_loading"
             Dense="true"
             EditMode="DataGridEditMode.Form"
             QuickFilter="@_quickFilter"
             MultiSelection="false"
             Hideable="true"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">

    <ToolBarContent>
        @* <MudText Typo="Typo.h6">Materials Inventory</MudText> *@

        <MudButton OnClick="@AddItem" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>

        <MudSpacer />

        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>

    <Columns>
        <SelectColumn T="MaterialDetails" />
        <PropertyColumn Property="x => x.Id" Sortable="false" Filterable="false" Hidden="true" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Unit.Value" Title="Unit Type" Filterable="false" />
        <PropertyColumn Property="x => x.PricePerUnit" Title="Price per Unit" Filterable="false" />

        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => EditItem(context.Item)" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => RemoveItem(context)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="MaterialDetails" />
    </PagerContent>
</MudDataGrid>

@code {
    private bool _loading = true;
    private IEnumerable<MaterialDetails> _gridData = Array.Empty<MaterialDetails>();

    private static readonly List<EnumReference> _unitTypes = new()
    {
        new EnumReference(MaterialUnit.Drops),
        new EnumReference(MaterialUnit.Centimeters),
        new EnumReference(MaterialUnit.Unit),
    };
    public List<EnumReference> UnitTypes => _unitTypes;

    private string _searchString = string.Empty;
    private Func<MaterialDetails, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        var search = _searchString.Trim();

        return (x.Unit?.Value?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.Name?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _loading = true;
            _gridData = await MaterialsService.GetAllAsync(default);
        }
        catch (Exception ex)
        {
            // TODO: Log and display error
            await DialogService.ShowMessageBox("Error", "Failed to load materials.");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void AddItem()
    {
        // Open dialog for adding material
    }

    private async Task RemoveItem(CellContext<MaterialDetails> context)
    {
        var result = await DialogService.ShowMessageBox(
            title: "Confirmation",
            message: "Do you want to delete the item?",
            yesText: "Yes",
            noText: "No"
        );

        if (result == true)
        {
            await MaterialsService.DeleteAsync(context.Item.Id, default);
            await LoadDataAsync();
        }
    }

    private async Task EditItem(MaterialDetails item)
    {
        // var parameters = new DialogParameters { ["Material"] = item };
        // var dialog = DialogService.Show<MaterialDetailsDialog>("Edit Material", parameters);
        // var result = await dialog.Result;
        // if (!result.Canceled)
        // {
        //     await LoadDataAsync();
        // }
    }

    // Optional: Implement these if needed, otherwise remove
    // private void RowClicked(DataGridRowClickEventArgs<MaterialDetails> args) { }
    // private void RowRightClicked(DataGridRowClickEventArgs<MaterialDetails> args) { }
    // private void SelectedItemsChanged(HashSet<MaterialDetails> items) { }
}
