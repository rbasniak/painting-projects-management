@using PaintingProjectsManagement.UI.Client.Modules.Materials.Models
@using PaintingProjectsManagement.UI.Client.Modules.Materials.Services
@using PaintingProjectsManagement.UI.Client.Models
@using MudBlazor
@using MudBlazor.Services
@inject IMaterialsService MaterialsService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField @bind-Value="material.Name" 
                         Label="Name" 
                         Required="true" 
                         RequiredError="Name is required!"
                         Variant="Variant.Outlined" />
            
            <MudSelect @bind-Value="material.Unit" 
                      Label="Unit" 
                      Required="true" 
                      RequiredError="Unit is required!"
                      Variant="Variant.Outlined">
                @foreach (var unit in Enum.GetValues<MaterialUnit>())
                {
                    <MudSelectItem Value="@unit">@unit</MudSelectItem>
                }
            </MudSelect>
            
            <MudNumericField @bind-Value="material.PricePerUnit" 
                            Label="Price Per Unit" 
                            Required="true" 
                            RequiredError="Price is required!"
                            Min="0.01"
                            Variant="Variant.Outlined" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="Submit" 
                  Disabled="!success">
            Create
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IDialogService DialogService { get; set; } = default!;
    
    private MudForm form = default!;
    private bool success;
    private CreateMaterialRequest material = new();

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                await MaterialsService.CreateMaterialAsync(material);
                Snackbar.Add("Material created successfully", Severity.Success);
                // Dialog will be closed automatically on successful submission
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error creating material: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() { /* Dialog will be closed automatically */ }
} 