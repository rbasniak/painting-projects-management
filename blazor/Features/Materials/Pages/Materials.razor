@page "/materials"
@using PaintingProjectsManagement.Blazor.Features.Materials.Models
@using PaintingProjectsManagement.Blazor.Features.Materials.Services
@inject IMaterialsApiService MaterialsApiService

<PageTitle>Materials - Painting Projects Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Materials</MudText>
    
    <MudPaper Class="pa-4">
        <MudToolBar>
            <MudText Typo="Typo.h6">All Materials</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog">
                Add Material
            </MudButton>
        </MudToolBar>
        
        <MudTable Items="@FilteredMaterials" Dense="true" Hover="true" Striped="true" Loading="@_loading">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" 
                             Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Unit</MudTh>
                <MudTh>Price Per Unit</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Unit">@context.Unit.Name</MudTd>
                <MudTd DataLabel="Price Per Unit">@context.PricePerUnit.ToString("C")</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditMaterial(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteMaterial(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<Material> MaterialsList { get; set; } = new();
    private bool _loading = true;
    private string _searchString = "";

    private IEnumerable<Material> FilteredMaterials => MaterialsList.Where(material =>
        string.IsNullOrWhiteSpace(_searchString) ||
        material.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await LoadMaterials();
    }

    private async Task LoadMaterials()
    {
        _loading = true;
        try
        {
            MaterialsList = await MaterialsApiService.GetMaterialsAsync();
        }
        catch (Exception ex)
        {
            // Handle error - could show a snackbar
            Console.WriteLine($"Error loading materials: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void OpenAddDialog()
    {
        // TODO: Implement add material dialog
    }

    private void EditMaterial(Material material)
    {
        // TODO: Implement edit material dialog
    }

    private void DeleteMaterial(Material material)
    {
        // TODO: Implement delete material confirmation
    }
} 