// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaintingProjectsManagment.Database;

#nullable disable

namespace PaintingProjectsManagment.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250728113944_AddMustHaveToModel")]
    partial class AddMustHaveToModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("PaintingProjectsManagement.Features.Materials.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("PricePerUnit")
                        .HasColumnType("REAL");

                    b.Property<string>("TenantId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TenantId");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique();

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("BaseSize")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Characters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FigureSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Franchise")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("TEXT");

                    b.Property<bool>("MustHave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfFigures")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SizeInMb")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique();

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Models.ModelCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique();

                    b.ToTable("ModelCategories", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaintBrands", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("BottleSize")
                        .HasColumnType("REAL");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LineId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.HasIndex("LineId", "HexColor")
                        .IsUnique();

                    b.HasIndex("LineId", "Name")
                        .IsUnique();

                    b.ToTable("Paints", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId", "Name")
                        .IsUnique();

                    b.ToTable("PaintLines", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("ProjectColorGroups", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColorGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SuggestedColorIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Zone")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorGroupId", "Zone")
                        .IsUnique();

                    b.ToTable("ProjectColorSections", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.MaterialForProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMaterials", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("StartDate");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique();

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPictures", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectReferences", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectSteps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectSteps", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Commons.Relational.SeedHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateApplied")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("__SeedHistory", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Hidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Claims", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.RoleToClaim", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClaimId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesToClaims", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.Tenant", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Alias");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivationCode")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("AuthenticationMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenValidity")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.UserToClaim", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Access")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClaimId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToClaims", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.UserToRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToRoles", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Materials.Material", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Models.Model", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Models.ModelCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Identity.Core.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Models.ModelCategory", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintColor", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Paints.PaintLine", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintLine", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Paints.PaintBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorGroup", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("Groups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorSection", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.ColorGroup", "ColorGroup")
                        .WithMany("Sections")
                        .HasForeignKey("ColorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorGroup");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.MaterialForProject", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("Materials")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.Project", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectPicture", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("Pictures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectReference", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("References")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectSteps", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithOne("Steps")
                        .HasForeignKey("PaintingProjectsManagement.Features.Projects.ProjectSteps", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Painting", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Planning", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Preparation", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Supporting", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.Navigation("Painting")
                        .IsRequired();

                    b.Navigation("Planning")
                        .IsRequired();

                    b.Navigation("Preparation")
                        .IsRequired();

                    b.Navigation("Supporting")
                        .IsRequired();
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.Role", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.RoleToClaim", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Claim", "Claim")
                        .WithMany("Roles")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Identity.Core.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.User", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("rbkApiModules.Identity.Core.PasswordRedefineCode", "PasswordRedefineCode", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("CreationDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("TEXT");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("PasswordRedefineCode");
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.UserToClaim", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Claim", "Claim")
                        .WithMany("Users")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Identity.Core.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.UserToRole", b =>
                {
                    b.HasOne("rbkApiModules.Identity.Core.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Identity.Core.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorGroup", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.Project", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Materials");

                    b.Navigation("Pictures");

                    b.Navigation("References");

                    b.Navigation("Steps")
                        .IsRequired();
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.Claim", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("rbkApiModules.Identity.Core.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
