// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaintingProjectsManagment.Database;

#nullable disable

namespace PaintingProjectsManagment.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("PaintingProjectsManagement.Features.Materials.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("PricePerUnit")
                        .HasColumnType("REAL");

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("BaseSize")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("FigureSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfFigures")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Models.ModelCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ModelCategories", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("PaintBrands", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("BottleSize")
                        .HasColumnType("REAL");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LineId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.ToTable("Paints", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Name");

                    b.ToTable("PaintLines", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectColorGroups", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColorGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SuggestedColorIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Zone")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorGroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Zone");

                    b.ToTable("ProjectColorSections", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.MaterialForProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMaterials", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("Name");

                    b.HasIndex("StartDate");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPictures", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectReferences", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectSteps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectSteps", (string)null);
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Models.Model", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Models.ModelCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintColor", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Paints.PaintLine", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Paints.PaintLine", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Paints.PaintBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorSection", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.ColorGroup", "ColorGroup")
                        .WithMany("Sections")
                        .HasForeignKey("ColorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("Sections")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorGroup");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.MaterialForProject", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("Materials")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectPicture", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("Pictures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectReference", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithMany("References")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ProjectSteps", b =>
                {
                    b.HasOne("PaintingProjectsManagement.Features.Projects.Project", null)
                        .WithOne("Steps")
                        .HasForeignKey("PaintingProjectsManagement.Features.Projects.ProjectSteps", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Painting", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Planning", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Preparation", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.OwnsOne("PaintingProjectsManagement.Features.Projects.ProjectStepData", "Supporting", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Duration")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.HasKey("StepId");

                            b1.ToTable("ProjectSteps");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.Navigation("Painting")
                        .IsRequired();

                    b.Navigation("Planning")
                        .IsRequired();

                    b.Navigation("Preparation")
                        .IsRequired();

                    b.Navigation("Supporting")
                        .IsRequired();
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.ColorGroup", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("PaintingProjectsManagement.Features.Projects.Project", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("Pictures");

                    b.Navigation("References");

                    b.Navigation("Sections");

                    b.Navigation("Steps")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
